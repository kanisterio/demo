# shellcheck shell=bash

if [[ -f .env.sample ]]; then
  if ! command -v createnv > /dev/null; then
    echo 'RECOMMEND|pyenv local 3.x.x && pip install createnv'
  elif [[ ! -f .env ]]; then
    createnv --use-default --overwrite \
      || echo 'ERROR|https://github.com/cuducos/createnv'
  fi
fi

# https://direnv.net/man/direnv-stdlib.1.html
dotenv_if_exists || direnv status
dotenv_if_exists .env.credentials.ignore.mlavi-usr
# dotenv_if_exists .env.credentials.ignore.mlavi-adm
# dotenv_if_exists .env.credentials.ignore.kubeadmin

PATH="$(pwd):${PATH}" && which oc # prefix PATH for local override

cat << 'EoM'

# Notes
- OpenShift credentials: .env.credentials.ignore.*
  - Download and use OpenShift CLI from console, not latest.
    - use ./oc versus \$PATH override
  - ```bash
oc login --insecure-skip-tls-verify=true -u "${USER_NAME}" -p "${USER_PASSWORD}" \
  --server="${K8S_SERVER}"
```
  - OpenShift Console: ${K8S_CONSOLE}
    - Use your mlavi-{usr,adm} credentials
    - If you need full in depth testing with kuebadmin power use:
      - Admin credentials = .env.credentials.ignore.kubeadmin
      - But be careful big power always come with big responsibility...
  - K10 Console: ${K8S_APPLICATION_K10}
    - Two applications has been created for you with the proper permissions
      - mlavi-postgresql to demonstrate blueprint
      - mlavi-pacman to demonstrate migration from OpenShift to EKS, your pacman app is:
        - http://pacman-route-mlavi-pacman.apps.se-lab-aro-prod-2.dev.azure.kasten.io
  - To connect to the secondary EKS cluster
    - `aws eks --region "${AWS_REGION}" update-kubeconfig --name "${AWS_EKS_NAME}"`
EoM
echo -e "\n${K8S_CONSOLE}\n${K8S_APPLICATION_K10}\n"
